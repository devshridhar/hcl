
Here’s a GitHub Actions workflow file for your project. It includes:
  ✅ Linting, Unit Tests, and BDD Tests (Cucumber & Playwright)
  ✅ Docker Build & Push to Docker Hub
  ✅ Automated Deployment (Optional - Modify based on your needs)
  
  📌 GitHub Actions Workflow (.github/workflows/ci-cd.yml)
  yml
  Copy
  Edit
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: 🔨 Build & Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm install

      - name: 🔍 Run Linter
        run: npm run lint

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠️ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm install

      - name: 🧪 Run Unit Tests
        run: npm run test

      - name: 🚀 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🧪 Run BDD Tests (Cucumber + Playwright)
        run: npx cucumber-js

  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔑 Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🐳 Build Docker Image
        run: docker build -t your-dockerhub-username/your-project-name .

      - name: 📤 Push Docker Image
        run: docker push your-dockerhub-username/your-project-name

  deploy:
    name: 🚀 Deploy to Server
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🔄 SSH & Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker pull your-dockerhub-username/your-project-name
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --name my-app -p 80:3000 your-dockerhub-username/your-project-name